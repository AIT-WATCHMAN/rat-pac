C***********************************************************************
C     -------------------------------------                            *
      SUBROUTINE lfariadne(vertex,nrhits,positions,direction,goodness,!*
     ,                   quality,nrscat,cos_scat)                   !  *
C     -------------------------------------                            *
C                                                                      *
C     (Purpose)                                                        *
C       find the direction from a labyrinth of multiply scattered      *
C       PMT hits                                                       *
C                                                                      *
C     (Input)                                                          *
C       vertex        -> found vertex of the event                     *
C       nrhits        -> number of hit PMTs                            *
C       positions     -> positions of the PMTs                         *
C                                                                      *
C     (Output)                                                         *
C       direction     -> direction of the event                        *
C       goodness      -> goodness of the fit                           *
C       quality       -> ratio of used directions                      *
C       nrscat        -> number of possible directions                 *
C       cos_scat      -> cos of maximum scattering angle               *
C                                                                      *
C     (Creation Date and Author)                                       *
C       1998.02.12 Michael Smy   Version 1.0: creation                 *
C       1998.04.10 Michael Smy   Version 1.1: use multi-pass approach  *
C       1998.04.13 Michael Smy   Version 1.2: simplify array structure *
C       1998.04.22 Michael Smy   Version 1.3: add mult. scat. analysis *
C       1998.05.05 Michael Smy   Version 2.0: smooth out direction bias*
C                                                                      *
C----------------------------------------------------------------------*
         IMPLICIT NONE!                                                *
C----------------------------------------------------------------------*
C     (constants)                                                      *
         REAL      cos_cut,cos_cut2,cut_frac1,cut_frac2      !         *
         PARAMETER (cos_cut  =0.88) ! angular search window            *
         PARAMETER (cos_cut2 =0.65) ! limit to distinguish alt. direct.*
         PARAMETER (cut_frac1=0.80) ! first cut fraction               *
         PARAMETER (cut_frac2=0.95) ! second cut fraction              *
         REAL      geo_cor(9,5,10)/ ! corr. of geometric det. asymmetry*
C     r2=1, ..., 5; z=-5                                               *
     /0.9256741,-.5744123,    0.7909322,    2.234750,   -1.311321,    !*
     ,                       -1.862912,     0.5088170,    0.,0.,      !*
     ,0.9732418,-.4450985,    0.2017089,    1.673966,    0.1129613,   !*
     ,                       -1.348858,     -.4467736,    0.,0.,      !*
     ,0.9540111,-.5451870,    0.5359077,    1.967171,    -.9613785,   !*
     ,                       -1.559592,     0.4165786,    0.,0.,      !*
     ,0.9853753,-.3760798,    0.1965875,    1.401750,    -.2217863,   !*
     ,                       -1.108292,     -.4810429E-01,0.,0.,      !*
     ,0.9675711,-.3851742,    0.5003955,    1.234601,   -1.257004,    !*
     ,                       -1.056399,     0.8217965,    0.,0.,      !*
C     r2=1, ..., 5; z=-4                                               *
     ,0.9507989,-.7185389E-01,0.5656574,    0.3092321,   -.8303260,   !*
     ,                        -.2765504,    0.1838242,    0.,0.,      !*
     ,0.9664244,-.1832062,    0.3459836,    0.6168088,   -.1041497,   !*
     ,                        -.4795448,    -.4331881,    0.,0.,      !*
     ,0.9810717,-.1495047,    0.4546113,    0.9524761,   -.9880977,   !*
     ,                        -.9936590,    0.4541198,    0.,0.,      !*
     ,0.9231694,-.1334491,    0.9103972,    0.5082359,  -1.493439,    !*
     ,                        -.3972285,    0.5010028,    0.,0.,      !*
     ,0.9893841,-.3057938,    -.1839551,    0.9791655,   1.139427,    !*
     ,                        -.7712641,   -1.098575,     0.,0.,      !*
C     r2=1, ..., 5; z=-3                                               *
     ,1.025866, 0.5445141E-01,-.7016719,    -.3697272E-01,2.471834,   !*
     ,                        -.2233815E-01,-2.014750,    0.,0.,      !*
     ,0.9352683,-.3126014E-01,0.7887996,    0.1419220,  -1.166213,    !*
     ,                        -.1062142,    0.2404906,    0.,0.,      !*
     ,0.9604545,-.1473189,    0.6887833,    0.5177876,  -1.273967,    !*
     ,                        -.4095665,    0.4502253,    0.,0.,      !*
     ,0.9821465,0.1057698,    0.1895825,    -.5055227,   0.1486520,   !*
     ,                        0.4202746,    -.5319142,    0.,0.,      !*
     ,0.9737518,-.9143074E-02,0.3849426,    -.1726118,   -.5770516,   !*
     ,                        0.2148637,    0.9050920E-01,0.,0.,      !*
C     r2=1, ..., 5; z=-2                                               *
     ,1.000641, -.1003098,    -.4631623,    0.2965170,   1.779366,    !*
     ,                        -.2013672,   -1.421602,     0.,0.,      !*
     ,0.9809745,-.1749684E-01,0.3705511,    0.3013734,   -.6777674,   !*
     ,                        -.3515970,    0.2154501,    0.,0.,      !*
     ,0.9847375,0.7047284E-01,0.1870481,    -.2318219,  -.2659594E-02,!*
     ,                        0.1201358,    -.3305756,    0.,0.,      !*
     ,0.9663612,0.3784581E-01,0.4850278,    -.1335049,   -.6780649,   !*
     ,                        0.7830815E-01,0.4881327E-01,0.,0.,      !*
     ,0.9839031,-.1273119E-01,0.5014380E-01,-.4906414E-01,0.5611103,  !*
     ,                        0.9057929E-01,-.7969165,    0.,0.,      !*
C     r2=1, ..., 5; z=-1                                               *
     ,0.9871207,-.1412842E-01,0.1939941,    0.5274263E-01,-.3175552,  !*
     ,                        -.6085100E-01,0.8092027E-01,0.,0.,      !*
     ,0.9918940,0.4816904E-02,0.2987759,    -.8295434E-01,-.8679128,  !*
     ,                        0.7640234E-01,0.5763382,    0.,0.,      !*
     ,1.017636, -.9278145E-01,-.6199569,    0.3443016,   2.309215,    !*
     ,                        -.2797215,   -1.919914,     0.,0.,      !*
     ,0.9948395,0.5027589E-02,-.6454244E-01,-.2145771,   0.7462680,   !*
     ,                        0.2458149,    -.8647833,    0.,0.,      !*
     ,0.9952037,-.7135668E-01,0.3237223,    0.2492233,   -.7319132,   !*
     ,                        -.2329560,    0.3015102,    0.,0.,      !*
C     r2=1, ..., 5; z=1                                                *
     ,0.9804484,-.1312332,    0.8249368E-01,0.3844081,   0.2119385,   !*
     ,                        -.2345960,    -.3555743,    0.,0.,      !*
     ,0.9931549,0.1693210,    -.2348208E-02,-.7996548,   0.4222167,   !*
     ,                        0.6956503,    -.5422400,    0.,0.,      !*
     ,0.9777011,-.1822837,    0.1110240,    0.6619959,   0.4450394,   !*
     ,                        -.4870710,    -.7329406,    0.,0.,      !*
     ,0.9707708,0.1359948,    -.1105111,    -.5098790,   1.219939,    !*
     ,                        0.3708332,   -1.253699,     0.,0.,      !*
     ,1.002270, -.5311936E-02,-.3684720,    0.1957758,   1.663956,    !*
     ,                        -.2269575,   -1.494434,     0.,0.,      !*
C     r2=1, ..., 5; z=2                                                *
     ,0.9645518,0.9712158E-02,0.5738498,    0.9898128E-03,-1.123893,  !*
     ,                        -.7001755E-01,0.4812361,    0.,0.,      !*
     ,0.9593899,-.4928337E-02,0.5866938,    0.2386725,  -1.124879,    !*
     ,                        -.3076237,    0.4889788,    0.,0.,      !*
     ,0.9688479,-.3708158E-01,0.2193570,    0.9775731E-02,0.1389963,  !*
     ,                        0.4502957E-01,-.4940610,    0.,0.,      !*
     ,0.9913653,0.4483737E-01,-.1438172,    -.1099453,   1.027248,    !*
     ,                        0.4704979E-01,-1.049261,    0.,0.,      !*
     ,1.022096, 0.2287423E-02,-.2503821E-01,.1353067,   0.1373264,   !*
     ,                        -.9608075E-01,-.2921335,    0.,0.,      !*
C     r2=1, ..., 5; z=3                                                *
     ,0.9573919,0.2117477E-01,0.3217420,    -.2282262,  -.4015288E-01,!*
     ,                        0.2615256,    -.4018432,    0.,0.,      !*
     ,0.9566616,-.1100439E-02,0.4264640,    -.1375419,  -.2614416,    !*
     ,                        0.1286238,    -.3320292,    0.,0.,      !*
     ,0.9547467,0.1427705E-01,0.5529464,    0.1962613E-01,-.7543244,  !*
     ,                        -.1120436,    0.7842408E-01,0.,0.,      !*
     ,0.9677260,0.7520663E-01,0.8034758E-01,-.3496732,  0.7057774,    !*
     ,                        0.3753654,    -.9576203,    0.,0.,      !*
     ,0.9570911,0.2046371E-01,0.6589075,    0.1245362,  -1.170455,    !*
     ,                        -.1808610,    0.3986982,    0.,0.,      !*
C     r2=1, ..., 5; z=4                                                *
     ,0.9141021,0.4618649E-01,0.7200179,    -.4460655,  -.8075520,    !*
     ,                        0.4713960,    0.4743683E-01,0.,0.,      !*
     ,0.9748242,0.5263864E-01,0.4315468,    -.1287594,  -.7684986,    !*
     ,                        0.8997767E-01,0.2429798,    0.,0.,      !*
     ,0.9712033,0.1902543,    0.5511190,    -.3857660,  -1.157432,    !*
     ,                        0.2117986,    0.5350813,    0.,0.,      !*
     ,0.9792318,0.1855450,    0.2452621,    -.5604110,  -.1400485,    !*
     ,                        0.4097505,    -.2351249,    0.,0.,      !*
     ,0.9670842,0.1125807,    0.3375938,    -.5667988E-01,-.2947196,  !*
     ,                        -.4491442E-01,-.1487524,    0.,0.,      !*
C     r2=1, ..., 5; z=5                                                *
     ,0.9272570,0.6806014,    0.4792071,   -2.825248,   -.7241297E-01,!*
     ,                        2.369284,     -.5145711,    0.,0.,      !*
     ,0.8997182,0.6163023,    0.8305006,   -2.445837,  -1.324921,     !*
     ,                        2.029662,     0.6192145,    0.,0.,      !*
     ,0.9243672,0.4793727,    1.018181,    -1.667388,  -2.155660,     !*
     ,                        1.321661,     1.172837,    0.,0.,       !*
     ,0.9285983,0.5761951,    0.7135454,   -2.019558,  -1.064688,     !*
     ,                        1.629827,     0.3228146,    0.,0.,      !*
     ,0.9557385,0.5005200,    0.6548905,   -1.745335,  -1.455969,     !*
     ,                        1.364662,     0.8212625,    0.,0./      !*
cC     r2=1, ..., 5; z=-5                                               *
c     /0.9309285,-.3176138,     -.6425624,    2.101496,     7.050828,  !*
c     ,         -1.807275,    -13.69795,      0.6882555E-01,7.469656,  !*
c     ,0.9446428,-.3189679,     -.3865959,    2.066635,     5.240205,  !*
c     ,         -1.906835,    -10.64419,      0.2029757,    5.911152,  !*
c     ,0.9601075,-.3643754,     -.5239492,    1.912914,     5.355679,  !*
c     ,         -1.701777,    -10.50083,      0.1634150,    5.791857,  !*
c     ,0.9682177,-.2883776,     -.2662777,    0.9719001,    3.561014,  !*
c     ,          0.3485578E-01,-7.439975,     -.7922592,    4.240841,  !*
c     ,0.9924535,-.3529708,     -.5421913,    0.9475494,    4.208784,  !*
c     ,          -.2655684,    -8.107753,     -.4744487,    4.543066,  !*
cC     r2=1, ..., 5; z=-4                                               *
c     ,0.9362849,-.3099466E-01, 0.6478633,    1.118945,     -.9008262, !*
c     ,         -1.856908,      0.1414119,    0.8993659, 0.6948777E-01,!*
c     ,0.9765252,-.7537605E-01, -.3277062E-01,0.9173040,    2.021671,  !*
c     ,         -1.359963,     -4.477208,     0.5888067,    2.427006,  !*
c     ,0.9854532,-.1265154,     -.1183355,    1.082878,     2.220615,  !*
c     ,         -1.626291,     -4.669065,     0.7117110,    2.491928,  !*
c     ,0.9603782,-.1671981,     0.3675747E-01,0.9175588,    2.499212,  !*
c     ,          -.9649485,    -5.916834,     0.2129138,    3.355152,  !*
c     ,0.9915348,-.2159231,     -.2469788,    0.7330428,    2.698313,  !*
c     ,          -.6871610,    -5.330185,     0.1394374,    2.813283,  !*
cC     r2=1, ..., 5; z=-3                                               *
c     ,0.9864514,0.8407412E-01, 0.2330726,    0.2738565,    -.7365118, !*
c     ,          -.4634473,     1.368753,     0.1855237,   -1.011472,  !*
c     ,0.9727359,-.3872934E-01, 0.3221841,    0.5335824,    -.1879403, !*
c     ,          -.6202818,     -.6207669,    0.1462514,    0.4152254, !*
c     ,0.9934883,-.8985130E-01, -.9494288E-01,0.5957831,    1.663576,  !*
c     ,          -.8806538,    -3.359087,     0.4101529,    1.667807,  !*
c     ,0.9946454,-.1320001,     -.1151777,    0.6557955,    1.693608,  !*
c     ,          -1.134441,    -3.473055,     0.6276442,    1.810594,  !*
c     ,0.9981639,-.6844239E-01, -.1694046E-01,0.2610737,    1.098831,  !*
c     ,          -.4180781,    -2.367065,     0.2547565,    1.132791,  !*
cC     r2=1, ..., 5; z=-2                                               *
c     ,0.9716566,0.4045501E-01, 0.3609781,    -.1812793,   -1.345245,  !*
c     ,          0.2790141,     2.395255,     -.1023053,   -1.486094,  !*
c     ,0.9868513,-.7037610E-02, 0.2519445,    0.4819717,    -.5305100, !*
c     ,          -.8917624,     0.6024237,    0.4435229,    -.4571845, !*
c     ,1.004346, -.5370761E-01, -.1538099,    0.3794865,    1.482129,  !*
c     ,          -.7127115,    -2.865503,     0.3870730,    1.438697,  !*
c     ,0.9918320,0.1777552E-01, 0.8720457E-01,-.1856236E-01,0.5658622, !*
c     ,          -.7832282E-01,-1.520591,     0.8774079E-01,0.7483630, !*
c     ,1.004792, -.2354950E-01, -.2811070,    -.8420995E-02,2.409452,  !*
c     ,          -.1667078E-01,-4.449936,     0.7961956E-01,2.184518,  !*
cC     r2=1, ..., 5; z=-1                                               *
c     ,0.9797782,-.5427465E-01, 0.8481079E-01,0.1835385,    0.4138393, !*
c     ,          -.1881926,    -1.018331,     0.1463994E-01,0.4919229, !*
c     ,0.9770097,-.7564485E-02, 0.6612685,    0.1091510,   -2.862176,  !*
c     ,          -.2257407,     4.568256,     0.1199007,   -2.498549,  !*
c     ,0.9750293,-.1159229,     0.2208826,    0.5055918,    -.2486917, !*
c     ,          -.6997434,     0.4086176,    0.2857945,    -.5157109, !*
c     ,1.007103, 0.1809926E-01, -.3343723,    -.2446029,    2.325052,  !*
c     ,          0.3651851,    -3.910000,     -.1007399,    1.781213,  !*
c     ,1.028144, -.6329184E-01, -.4376981,    0.1020051,    2.619588,  !*
c     ,          -.5656048E-01,-4.757655,     -.2479086E-01,2.461555,  !*
cC     r2=1, ..., 5; z=1                                                *
c     ,0.9728739,-.8188704E-01, 0.1608631,    0.3414809E-01,0.1421582, !*
c     ,          0.2471852,     -.4787445,    -.2351891,    0.1211516, !*
c     ,0.9750800,-.9418239E-03, 0.4411888,    -.1863847E-01,-1.308639, !*
c     ,          0.1280008E-01, 1.758231,     -.2816918E-02,-1.004389, !*
c     ,0.9926538,-.8121593E-01, -.1116758,    0.6893802E-01,1.114219,  !*
c     ,          0.3086688,    -1.643317,     -.3189485,    0.5083271, !*
c     ,0.9990640,-.1732084E-01, -.2120666,    -.1442747,    1.648644,  !*
c     ,          0.2757586,    -2.711311,     -.1607511,    1.163004,  !*
c     ,1.019781, 0.4118364E-02, -.3745016,    -.3173234,    2.201340,  !*
c     ,          0.7811144,    -3.633390,     -.5138043,    1.654547,  !*
cC     r2=1, ..., 5; z=2                                                *
c     ,0.9717855,-.9092159E-01, 0.5076150,    -.2889025,   -1.551073,  !*
c     ,          0.7054787,     1.995405,     -.4396287,   -1.042563,  !*
c     ,0.9670058,-.4756628E-01, 0.4361821,    -.1249499,   -1.327990,  !*
c     ,          0.3936425,     1.991918,     -.2772751,   -1.182325,  !*
c     ,0.9633063,-.4712471E-01, 0.3488702,    0.1496141,    -.3807035, !*
c     ,          -.3496918,     0.2327524,    0.2163687,    -.3304341, !*
c     ,0.9893233,-.2152561E-01, 0.4841986E-01,0.1301459,    0.4547275, !*
c     ,          -.2763080,     -.7518519,    0.1253302, 0.9892213E-01,!*
c     ,1.036416, 0.8191347E-01, -.4849006,    -.2012738,    2.968456,  !*
c     ,          0.5026872,    -5.339642,     -.3841028,    2.648992,  !*
cC     r2=1, ..., 5; z=3                                                *
c     ,0.9542847,-.1876985E-01, 0.6413456,    -.6502175,   -1.635962,  !*
c     ,          1.036458,      1.757549,     -.4600278,    -.8276209, !*
c     ,0.9622621,-.3779475E-01, 0.4237079,    -.4717984,    -.5948547, !*
c     ,          0.8734840,     0.1683722,    -.4720639, -.7726408E-01,!*
c     ,0.9759932,-.4617104E-01, 0.3807300,    -.4626802,    -.5598005, !*
c     ,          0.8007765,     0.2241441,    -.4083351,    -.2067408, !*
c     ,0.9758160,0.1020145,     -.2768985E-02,-.6827044,    1.604066,  !*
c     ,          1.172611,     -3.297692,     -.6127713,    1.578509,  !*
c     ,1.019522, 0.1127233,     -.3125900,    -.4134994,    2.316519,  !*
c     ,          0.6951972,    -4.323801,     -.3985192,    2.151514,  !*
cC     r2=1, ..., 5; z=4                                                *
c     ,0.9658124,0.1255666E-02,  0.2929644,   -.5001684,    -.1608050, !*
c     ,          0.6997310,      -.4951912,   -.2748072,    0.3549061, !*
c     ,0.9807132,0.9294958E-02,  0.1549055,   -.3592488,    0.2445684, !*
c     ,          0.4270979,     -1.033089,    -.1261031,    0.5968950, !*
c     ,0.9879346,0.7284343E-01,  -.1034302,   -.4856685,    1.647743,  !*
c     ,          0.5631593,     -3.429359,    -.1631062,    1.862146,  !*
c     ,0.9992053,0.9417300E-01, -.2125891,    -.5423197,    1.975184,  !*
c     ,          0.6750456,    -3.906860,     -.2347012,    2.112730,  !*
c     ,0.9952940,0.8782192E-01, 0.1712484E-01,-.3452201,    0.6781431, !*
c     ,          0.4179249,    -1.755150,     -.1569896,    1.026960,  !*
cc     ,0.9286816,0.7087318E-02, 0.5945361,   -1.063526,     -.3359211, !*
cc     ,          1.511304,      -.9348897,    -.5955296,    0.6649011, !*
cc     ,0.9594943,0.2358376E-01, 0.3122265,    -.7801873,    0.5046265, !*
cc     ,          0.9746225,    -2.085037,     -.3099028,    1.200296,  !*
cc     ,0.9749492,0.1481641,     -.2075982,   -1.008359,     3.317963,  !*
cc     ,          1.203561,     -6.897377,     -.3666337,    3.744030,  !*
cc     ,0.9976217,0.1918010,     -.4247119,    -1.124474,    3.957837,  !*
cc     ,          1.436853,     -7.822514,     -.5187942,    4.229019,  !*
cc     ,0.9900593,0.1759734,     0.4133193E-01,-.6887379,    1.328016,  !*
cc     ,          0.8298932,    -3.472533,     -.3100601,    2.039761,  !*
cC     r2=1, ..., 5; z=5                                                *
c     , 0.9559435,0.1974600,     -.1710524,   -1.172690,     2.641793, !*
c     ,           0.7347275,    -5.134986,     0.2245519,    2.756618, !*
c     , 0.9638055,0.1662705,     -.2352250,    -.9310583,    2.766444, !*
c     ,           0.5633578,    -5.360214,     0.1936429,    2.943607, !*
c     , 0.9777230,0.1828758,     -.2138294,    -.8035793,    2.458922, !*
c     ,           0.4999241,    -4.919855,     0.1578248,    2.741519, !*
c     , 0.9864987,0.2028149,     -.1775555,    -.7145714,    1.792436, !*
c     ,           0.2942904,    -3.439252,     0.2611241,    1.849722, !*
c     , 0.9902338,0.2081093,     -.2105939,    -.7478356,    2.037524, !*
c     ,           0.4743638,    -4.067661,     0.1179963,    2.282046/ !*
cc     ,0.9082726,0.3950142,     -.4040416,   -2.398960,     5.550448,  !*
cc     ,          1.531645,    -10.42892,      0.4437314,    5.455570,  !*
cc     ,0.9255005,0.3319671,     -.5084716,   -1.901271,     5.707934,  !*
cc     ,          1.187520,    -10.85808,      0.3655992,    5.882164,  !*
cc     ,0.9547953,0.3644027,     -.4425957,   -1.631937,     5.006520,  !*
cc     ,          1.060136,     -9.950550,     0.2819803,    5.516592,  !*
cc     ,0.9723639,0.4017477,     -.3479927,   -1.418281,     3.552429,  !*
cc     ,          0.5730869,    -6.808407,     0.5315344,    3.652070,  !*
cc     ,0.9796472,0.4135453,     -.4095217,   -1.493088,     4.043454,  !*
cc     ,          0.9570289,    -8.099490,     0.2275242,    4.547269/  !*
cCMC     r2=1, ..., 5; |z|=1                                              *
c     /0.9800484,-.5138049E-01, 0.2727379,    0.6924297E-01, -.7964883,!*
c     ,          -.4579412E-01, 1.101950,     0.3495732E-01, -.6218023,!*
c     ,0.9670991,-.1352906,     0.4516530,    0.3559941,     -1.467913,!*
c     ,          -.2978880,     2.274676,     0.6652616E-02, -1.341268,!*
c     ,0.9796594,-.2152608E-01, 0.1535152, -.8719144E-01,0.4259567E-01,!*
c     ,          0.1967699,     -.1871183,    -.1099734,     -.1136308,!*
c     ,1.006818, 0.1636543E-01, -.2677855,    -.9203947E-01,  2.171420,!*
c     ,          0.3727186E-01,-3.860152,     0.3617901E-01,  1.796466,!*
c     ,1.032885, -.2786617E-01, -.5083624,    0.9568594E-01,  2.724364,!*
c     ,          -.2973633,    -4.476564,     0.2114622,      2.080837,!*
cC     r2=1, ..., 5; |z|=2                                              *
c     ,0.9801420,0.2027584E-01, 0.2635565,    -.1559871,     -.7014373,!*
c     ,          0.4567802,     0.9482605,    -.3558545,     -.5685952,!*
c     ,0.9716856,0.1459711E-01, 0.3992882,    -.2611366,     -1.238634,!*
c     ,          0.3147310,     1.950358,     -.1055032,     -1.221180,!*
c     ,0.9864746,-.4182884E-01, -.1322810,    -.8519871E-01,  1.616680,!*
c     ,          0.1196668,    -3.007298,     -.2352205E-01,  1.475071,!*
c     ,1.003703, -.1744035E-01, -.1308209,    0.2793691E-01,  1.687567,!*
c     ,          -.2612977E-01,-3.367110,     0.2798120E-01,  1.650639,!*
c     ,1.018686, -.1174495E-01, -.4118572,    0.1115606,      2.455147,!*
c     ,          -.1835052,    -4.010024,     0.7902320E-01,  1.803851,!*
cC     r2=1, ..., 5; |z|=3                                              *
c     ,0.9631863,-.9604114E-02, 0.7114982,    0.9293222E-01,-2.177208, !*
c     ,          -.2519284,     2.669954,     0.1607775,    -1.317058, !*
c     ,0.9683713,-.2234400E-01, 0.1958450,    0.6022956E-01, 0.4520865,!*
c     ,          -.2169924,    -1.412857,     0.1592781,     0.6998714,!*
c     ,0.9815888,0.6281869E-01, 0.2117108E-01,0.8066284E-01, 1.285495, !*
c     ,          -.2381266E-01,-2.866957,     -.6972968E-01, 1.474375, !*
c     ,0.9982859,0.2604367E-01, -.4400880E-01,0.1384712,     1.342201, !*
c     ,          -.2927857,    -2.952164,     0.1674307,     1.527123, !*
c     ,1.000665, -.1379637,     -.5503659E-01,0.3545277,     1.320758, !*
c     ,          -.5456669,    -2.819278,     0.2523799,     1.406526, !*
cC     r2=1, ..., 5; |z|=4                                              *
c     ,0.9465187,0.3269076E-01, 0.4903528,    -.1788944,     -.1486009,!*
c     ,          0.3882188,    -1.153951,     -.2433451,     0.7613875,!*
c     ,0.9655394,-.6596623E-01, 0.2023455,    0.3348573,     1.057148, !*
c     ,          -.6827027,    -3.077579,     0.4226959,     1.757138, !*
c     ,0.9658265,0.1567346E-01, -.3395304E-01,-.1894952E-01, 2.268714, !*
c     ,          -.1351658,    -4.944291,     0.1533254,     2.682710, !*
c     ,0.9689229,-.2733884E-01, 0.6226615E-01,-.2294353E-01, 1.739048, !*
c     ,          0.3184658E-01,-4.239418,     -.1579816E-01, 2.413327, !*
c     ,1.006935, -.3941696E-01, -.3684912,    0.3302305,     2.853726, !*
c     ,          -.5273321,    -5.348114,     0.2335474,     2.782526, !*
cC     r2=1, ..., 5; |z|=5                                              *
c     ,0.9321399,0.4639488E-01, -.3471141,    -.1926796,     5.433644, !*
c     ,          0.2625189,   -11.44405,      -.7718702E-01, 6.585495, !*
c     ,0.9389797,0.2750158E-01, -.2437752,    -.1826070,     4.627862, !*
c     ,          0.2275733,    -9.937296,     -.4966500E-01, 5.727037, !*
c     ,0.9435165,0.1016327E-01, -.2090864,    -.4716857E-01, 4.239145, !*
c     ,          0.3453293E-01,-9.188832,     -.1080592E-01, 5.319509, !*
c     ,0.9643324,-.2132419E-01, -.4326092,    0.1273220E-01, 4.474870, !*
c     ,          -.6054521E-01,-8.850494,     0.4161528E-01, 4.943408, !*
c     ,0.9804766,0.2605990E-01, -.5914983,    -.4004908E-01, 4.779554, !*
c     ,          -.1666458,    -9.010301,     0.2134069,     4.931808/ !*
cC     r2=1, ..., 5; |z|=1                                              *
c     /0.9990863,-.2812852E-01, 0.2104984E-01,0.1995502,  0.7107126E-01,!
c     ,              -.3175782, 0.4221140E-01,0.1346176,    -.2371755, !*
c     ,0.9820989,0.2957287E-01, 0.2310098,    -.8262692E-01,-.7060766, !*
c     ,              -.5695909E-01, 1.160734, 0.1331918,    -.7534073, !*
c     ,1.007363, -.5869035E-01, 0.5629180E-01,0.2170580,    -.1800217, !*
c     ,              -.1831526,     0.4056754,0.2227871E-01,-.4327502, !*
c     ,1.027449, -.5130781E-01, -.2652921,    0.1497057,    1.534616,  !*
c     ,              -.6234764E-01,-2.751054, -.3751373E-01,1.323586,  !*
c     ,1.049652, -.6383976E-02, -.3840468,    0.1186078,    1.751155,  !*
c     ,              -.3297627,    -2.954565, 0.2332737,    1.351892,  !*
cC     r2=1, ..., 5; |z|=2                                              *
c     ,0.9679639,0.7333053E-02, 0.3212525,    -.5872648E-01,-.8490615, !*
c     ,              0.9873597E-01, 1.219732, -.4583247E-01,-.7153939, !*
c     ,0.9858781,-.2704560E-01, 0.1100942,    0.3996811E-01,0.1856943, !*
c     ,              0.7651332E-01, -.6491123,-.8872392E-01,0.2971177, !*
c     ,1.021281, -.3526830E-01, -.1233250,    0.1644531,    0.5383324, !*
c     ,              -.2361977,     -.8721234,0.1174305,    0.3307245, !*
c     ,1.034140, -.1237571E-01, -.2803280,    0.4268893E-01,1.396672,  !*
c     ,              -.3047065E-01,-2.464743, 0.1262350E-02,1.188656,  !*
c     ,1.061661, -.1315782E-01, -.5915318,    -.4160193E-01,2.618786,  !*
c     ,              0.2378912,    -4.483160, -.1868787,    2.269914,  !*
cC     r2=1, ..., 5; |z|=3                                              *
c     ,0.9597511,-.1468530E-01, 0.4534483,    0.9328388E-01,-.9281421, !*
c     ,              -.2177840,     0.9285725,0.1554914,    -.5213813, !*
c     ,0.9747305,-.3681383E-01, 0.1778130,    0.1973566,    0.2136166, !*
c     ,              -.3069726,     -.9471381,0.1495040,    0.5272139, !*
c     ,1.005250, -.1618532E-01, -.8874941E-01,0.5935803E-01,1.078282,  !*
c     ,              -.4601179E-01,-2.250643, 0.2484898E-02,1.171774,  !*
c     ,1.021091, -.3820587E-01, -.1075069,    0.1987908,    0.8423436, !*
c     ,              -.3414105,    -1.821630, 0.1998442,    0.9585786, !*
c     ,1.057119, -.2671444E-01, -.5931464,    0.2274196,    2.740089,  !*
c     ,              -.4332016,    -4.641262, 0.2313549,    2.300559,  !*
cC     r2=1, ..., 5; |z|=4                                              *
c     ,0.9432269,-.5929817E-01, 0.2658085,    0.3305333,    0.8600595, !*
c     ,              -.5402761,    -2.612299, 0.2727956,    1.524111,  !*
c     ,0.9604633,0.1239596E-02, 0.1351703,    -.7655586E-01,0.9169438, !*
c     ,              0.1570953,    -2.373662, -.7105961E-01,1.351692,  !*
c     ,0.9926395,-.4505097E-01, -.1696921,    0.1283473,    1.720216,  !*
c     ,              -.4959396E-01,-3.449135, -.3222255E-01,1.913579,  !*
c     ,1.013371, -.4995715E-01, -.3507396,    0.1881785,    2.262152,  !*
c     ,              -.1916497,    -4.219285, 0.5965519E-01,2.284852,  !*
c     ,1.024084, -.4448988E-01, -.2480938,    0.2118947,    1.412969,  !*
c     ,              -.3005319,    -2.744018, 0.1404465,    1.512231,  !*
cC     r2=1, ..., 5; |z|=5                                              *
c     ,0.9186811,-.2949562E-01, -.3194813,    0.1991501E-02,5.064127,  !*
c     ,              0.1532295,   -10.63999,  -.1315863,    6.255091,  !*
c     ,0.9217479,-.2204283E-01, -.2162583,    0.1491285,    4.376014,  !*
c     ,              -.3546066,    -9.225088, 0.2448286,    5.337211,  !*
c     ,0.9305856,-.2440515E-01, -.1209752,    0.9480974E-01,3.213050,  !*
c     ,              -.8283386E-01,-6.811470, -.6512555E-03,3.961897,  !*
c     ,0.9492552,0.2362826E-01, -.1464452,    -.1632207,    2.861623,  !*
c     ,              0.2444390,    -5.902816, -.9485167E-01,3.334543,  !*
c     ,0.9676860,0.8731615E-02, -.2840860,    0.4452430E-01,3.212617,  !*
c     ,              -.2534164,    -6.377961, 0.2209013,    3.560701/  !*
c         INCLUDE 'lfclus.par'       !                                  *
#include "lfclus.par"
C----------------------------------------------------------------------*
C     (arguments)                                                      *
         REAL      vertex(3),positions(3,lfmax)              !         *
         INTEGER   nrhits,nrscat                             !         *
         REAL      direction(3),goodness,quality,cos_scat    !         *
C----------------------------------------------------------------------*
C                                                                      *
C     (local variables)                                                *
         REAL      vector(3,lfmax),distance,cosine,dz,dr2    !         *
         REAL      cor(9),weight                             !         *
         REAL      tempdir(4),clusdir(4,1000),maxmag,limit   !         *
         INTEGER   row,column,i,j,sol,clus_index,max_index   !         *
         INTEGER   nradd,nrdir,binr2,binz,histo              !         *
         REAL      directions(4,lfmax*(lfmax-1))             !         *
         LOGICAL   active(lfmax*(lfmax-1))                   !         *
         COMMON    /dirfitar/directions,active               !         *
C                                                                      *
C***********************************************************************
C ntuple.cmn
C ----------------------------------------------------------------------

      INTEGER nr50,pselect,select,flag,vnr50
      REAL    t_fission
      REAL    vert(3),direct(3),good,dirgood,nreff,energy
      REAL    ari_direction(3),ari_good,ari_qual
      REAL    arif_direction(3),arif_good,aris_direction(3)
      REAL    aris_good,arit_direction(3),arit_good

C ----------------------------------------------------------------------

C===================================================================
C Subroutine begin:
C-------------------------------------------------------------------

C-------------------------------------------------------------------
C get all the direction vectors from the vertex to the PMTs
C-------------------------------------------------------------------
         goodness=-1
         quality=0.5*nrhits*(nrhits+1)
C-------------------------------------------------------------------
C calculate the coefficients for the weighting function
         binz=0.5+(1600+vertex(3))/320
         IF (binz .LT. 0) binz=0
         binr2=0.5+(vertex(1)**2+vertex(2)**2)/4E5
C special case for rbin 0
         IF (binr2 .EQ. 0) THEN
            IF (binz .EQ. 0) THEN
               DO row=1,9
                  cor(row)=geo_cor(row,1,1)
               ENDDO
            ELSEIF (binz .GT. 9) THEN
               DO row=1,9
                  cor(row)=geo_cor(row,1,10)
               ENDDO
            ELSE
               dz=(1600+vertex(3))/320+0.5-binz
               DO row=1,9
                  cor(row)=geo_cor(row,1,binz)*(1-dz)+
     +                     geo_cor(row,1,binz+1)*dz
               ENDDO
            ENDIF
C special case for rbin overflow
         ELSEIF (binr2 .GT. 4) THEN
            IF (binz .EQ. 0) THEN
               DO row=1,9
                  cor(row)=geo_cor(row,5,1)
               ENDDO
            ELSEIF (binz .GT. 9) THEN
               DO row=1,9
                  cor(row)=geo_cor(row,5,10)
               ENDDO
            ELSE
               dz=(1600+vertex(3))/320+0.5-binz
               DO row=1,9
                  cor(row)=geo_cor(row,5,binz)*(1-dz)+
     +                     geo_cor(row,5,binz+1)*dz
               ENDDO
            ENDIF
C normal rbin
         ELSE
            dr2=abs(vertex(1)**2+vertex(2)**2)/4E5+0.5-binr2
            IF (binz .EQ. 0) THEN
               DO row=1,9
                  cor(row)=geo_cor(row,binr2,1)*(1-dr2)+
     +                     geo_cor(row,binr2+1,1)*dr2
               ENDDO
            ELSEIF (binz .GT. 9) THEN
               DO row=1,9
                  cor(row)=geo_cor(row,binr2,10)*(1-dr2)+
     +                     geo_cor(row,binr2+1,10)*dr2
               ENDDO
            ELSE
               dz=abs(vertex(3))/320+0.5-binz
               DO row=1,9
                  cor(row)=geo_cor(row,binr2,binz)*(1-dr2)*(1-dz)+
     +                     geo_cor(row,binr2+1,binz)*dr2*(1-dz)+
     +                     geo_cor(row,binr2,binz+1)*dz*(1-dr2)+
     +                     geo_cor(row,binr2+1,binz+1)*dr2*dz
               ENDDO
            ENDIF
         ENDIF
         binz=(1600+vertex(3))/320
         binr2=1+(vertex(1)**2+vertex(2)**2)/4E5
         IF ((binr2 .GT. 5) .OR. (binz .GT. 9) .OR.
     .       (vertex(3) .LT. -1600)) THEN
            histo=-1
         ELSE
            histo=100+10*binr2+binz
         ENDIF
         DO row=1,nrhits
            distance=0.
            DO i=1, 3
               vector(i,row)=positions(i,row)-vertex(i)
               distance=distance+vector(i,row)**2
            ENDDO
            distance=sqrt(distance)
            DO i=1, 3
               vector(i,row)=vector(i,row)/distance
            ENDDO
            column=201+11.459*acos(vector(3,row))
csmy            CALL hf1(column,
csmy     ,   57.296*atan2(vector(2,row),vector(1,row)),1.)
csmy            dvector(row)=25./distance
         ENDDO
C-------------------------------------------------------------------
C find a pair of directions for each pair of PMTs
C-------------------------------------------------------------------
         nrdir=0
         DO row=1,nrhits
            DO column=row+1,nrhits
               nrdir=nrdir+2
               CALL cone_intersect(vector(1,row),vector(1,column),
     ,                             directions(1,nrdir-1),
     ,                             directions(1,nrdir),sol)
               IF (sol .EQ. 2) THEN
                  dz=directions(3,nrdir-1)
                  dr2=1
                  weight=0
                  DO i=1,9
                     weight=weight+cor(i)*dr2
                     dr2=dr2*dz
                  ENDDO
                  directions(4,nrdir-1)=1!weight
cc                  directions(4,nrdir-1)=0.9935-0.02133*dz-0.06799*dz**2+
cc     +                            0.1043*dz**3+1.116*dz**4-0.1551*dz**5-
cc     -                            2.354*dz**6+0.07607*dz**7+1.281*dz**8
cold                  directions(4,nrdir-1)=0.9929+0.01808*dz-0.06805*dz**2+
cold   +                            0.1405*dz**3+1.126*dz**4-0.2227*dz**5-
cold   -                            2.369*dz**6+0.1072*dz**7+1.288*dz**8
cgrave                  directions(4,nrdir-1)=(0.9738-0.06511*dz+0.3876*dz**2+
cgrave     +                                  0.1119*dz**3-0.5154*dz**4)**0.5
c                  call hf1(100,dz,1.)
c                  IF (histo .NE. -1) CALL hf1(histo,dz,1.)
                  dz=directions(3,nrdir)
                  dr2=1
                  weight=0
                  DO i=1,9
                     weight=weight+cor(i)*dr2
                     dr2=dr2*dz
                  ENDDO
                  directions(4,nrdir)=1!weight
c                  call hf1(100,dz,1.)
c                  IF (histo .NE. -1) CALL hf1(histo,dz,1.)
               ENDIF
               IF (sol .NE. 2) nrdir=nrdir-2
            ENDDO
         ENDDO
         DO row=1,nrdir
            active(row)=.TRUE.
         ENDDO
C-------------------------------------------------------------------
C loop through direction and try to add as many directions
C as possible (with a large angualar window). don't loop through the
C directions already added
C-------------------------------------------------------------------
         maxmag=2.5
         limit=2.5
         clus_index=0
         DO row=1,nrdir
            column=101+11.459*acos(directions(3,row))
c            CALL hf1(column,
c     ,   57.296*atan2(directions(2,row),directions(1,row)),1.)
            IF (active(row)) THEN
               clus_index=clus_index+1
               CALL sum_dir(clusdir(1,clus_index),nradd,
     ,                      directions(1,row),cos_cut,nrdir)
C-------------------------------------------------------------------
C store all directions that have at least 80% of the maximal goodness,
C find the maximal goodness
               IF (clusdir(4,clus_index) .LT. limit) THEN
                  clus_index=clus_index-1
               ELSEIF (clusdir(4,clus_index) .GT. maxmag) THEN
                  maxmag=clusdir(4,clus_index)
                  limit=maxmag*cut_frac1
                  max_index=clus_index
               ENDIF
            ENDIF
         ENDDO
         IF (clus_index .EQ. 0) THEN
            quality=0
            RETURN
         ENDIF
C-------------------------------------------------------------------
C reprocess the best directions with successively smaller angualar windows
         limit=maxmag*cut_frac1
         maxmag=1.5
         DO i=1,3
            tempdir(i)=clusdir(i,max_index)
            arif_direction(i)=clusdir(i,max_index)
         ENDDO
         cos_scat=1.
         nrscat=0
         max_index=-1
         DO i=1, clus_index
            IF (clusdir(4,i) .GT. limit) THEN
               cosine=clusdir(1,i)*tempdir(1)+clusdir(2,i)*tempdir(2)+
     +                clusdir(3,i)*tempdir(3)
               IF (cosine .LT. cos_cut2) THEN
                  nrscat=nrscat+1
                  IF (cosine .LT. cos_scat) THEN
                     cos_scat=cosine
                  ENDIF
               ENDIF
               CALL sum_dir(tempdir,nradd,clusdir(1,i),cos_cut,nrdir)
               IF (tempdir(4) .LT. maxmag*cut_frac2) THEN
                  clusdir(4,i)=0
               ELSEIF (tempdir(4) .GT. maxmag) THEN
                  maxmag=tempdir(4)
                  max_index=i
                  clusdir(1,i)=tempdir(1)
                  clusdir(2,i)=tempdir(2)
                  clusdir(3,i)=tempdir(3)
                  clusdir(4,i)=maxmag
               ENDIF
            ELSE
               clusdir(4,i)=0
            ENDIF
         ENDDO
         IF (max_index .EQ. -1) THEN
            quality=0
            RETURN
         ENDIF
C-------------------------------------------------------------------
C one last pass to improve the core resolution, calculate goodness
C and quality from the best direction found
         limit=maxmag*cut_frac2
         maxmag=1.5
         DO i=1, 3
            aris_direction(i)=clusdir(i,max_index)
         ENDDO
         max_index=-1
         DO i=1, clus_index
            IF (clusdir(4,i) .GT. limit) THEN
               CALL sum_dir(tempdir,nradd,clusdir(1,i),cos_cut,nrdir)
               IF (tempdir(4) .LT. maxmag*cut_frac2) THEN
                  clusdir(4,i)=0
               ELSEIF (tempdir(4) .GT. maxmag) THEN
                  maxmag=tempdir(4)
                  max_index=i
                  DO j=1, 4
                     clusdir(j,i)=tempdir(j)
                  ENDDO
               ENDIF
            ELSE
               clusdir(4,i)=0
            ENDIF
         ENDDO
         IF (max_index .EQ. -1) THEN
            quality=0
            RETURN
         ENDIF
c         DO i=1,3
c            arit_direction(i)=clusdir(i,max_index)
c         ENDDO
         goodness=clusdir(4,max_index)/quality
         CALL sum_dir(tempdir,nradd,clusdir(1,max_index),
     ,                cos_cut,nrdir)
         quality=nradd/quality
         IF (nradd .LT. 3) RETURN
         DO i=1, 3
            direction(i)=tempdir(i)
         ENDDO
         RETURN
      END

C***********************************************************************
C     -------------------------------------                            *
      SUBROUTINE cone_intersect(axis1,axis2,int1,int2,solution)!       *
C     -------------------------------------                            *
C                                                                      *
C     (Purpose)                                                        *
C       intersect two Cherenkov cones, if possible                     *
C                                                                      *
C     (Input)                                                          *
C       axis1         -> normal vector along the axis of the 1st cone  *
C       axis2         -> normal vector along the axis of the 2nd cone  *
C                                                                      *
C     (Output)                                                         *
C       int1          -> first possible intersection vector            *
C       int2          -> second possible intersection vector           *
C       solution      -> number of solutions found (0 to 2)            *
C                        3 solutions: axis1=axis2                      *
C                                                                      *
C     (Creation Date and Author)                                       *
C       1998.02.12 Michael Smy   Version 1.0: creation                 *
C                                                                      *
C----------------------------------------------------------------------*
         IMPLICIT NONE!                                                *
C----------------------------------------------------------------------*
C     (constants)                                                      *
c         INCLUDE 'lflight.par'       !                                 *
#include "lflight.par"
C----------------------------------------------------------------------*
C     (arguments)                                                      *
         REAL    axis1(3),axis2(3)   !                                 *
         REAL    int1(3),int2(3)     !                                 *
         INTEGER solution            !                                 *
C----------------------------------------------------------------------*
C     (local variables)                                                *
         REAL*8  cos_alpha,ratio,sin_gamma2,cross(3) !                 *
         REAL*8  ax1(3),ax2(3),sin_alpha2            !                 *
         INTEGER i                                   !                 *
C                                                                      *
C***********************************************************************
C Algorithm: cos(alpha)=axis1 dot axis2                                *
C            cos(gamma)=cos(theta)/cos(alpha/2)(theta: Cherenkov angle)*
C            b1=axis1+axis2 (normalized)                               *
C            b2=axis1xaxis2 (normalized)                               *
C            intersect=b1*cos(gamma)+-b2*sin(gamma)                    *
C***********************************************************************

C===================================================================
C Subroutine begin:
C-------------------------------------------------------------------
C find dot product and vector sum; convert to double precision
         cos_alpha=0D0
         DO i=1, 3
            ax1(i)=axis1(i)
            ax2(i)=axis2(i)
            int1(i)=ax1(i)+ax2(i)
            cos_alpha=cos_alpha+ax1(i)*ax2(i)
         ENDDO
C-------------------------------------------------------------------
C both vectors identical
         IF (abs(cos_alpha) .EQ. 1.) THEN
            solution=3
            RETURN
         ENDIF
C-------------------------------------------------------------------
C ratio=cos(gamma)/||axis1+axis2||
C      =cos(theta)/(cos(alpha/2)*sqrt(2*(1+cos(alpha)))
C      =cos(theta)/sqrt(0.5*(1+cos(alpha)))*sqrt(2*(1+cos(alpha)))
C      =cos(theta)/(1+cos(alpha))
C sin(gamma)**2=1-cos(theta)**2/cos(alpha/2)**2
C              =1-2*cos(theta)**2/(1+cos(alpha))
C              =1-2*cos(theta)*ratio
C no intersection possible --> return; also special case for one solution
         ratio=cos_theta/(1+cos_alpha)
         sin_gamma2=1-2*cos_theta*ratio
         IF (sin_gamma2 .LT. 0) THEN
            solution=0
            RETURN
         ENDIF
         DO i=1, 3
            int1(i)=int1(i)*ratio
            int2(i)=int1(i)
         ENDDO
         IF (sin_gamma2 .EQ. 0) THEN
            solution=1
            RETURN
         ENDIF
C-------------------------------------------------------------------
C 2 solutions: for better precision, use
C ||axis1xaxis2||**2=||axis1||**2||axis2||**2-cos(alpha)**2 instead of
C                    1-cos(alpha)**2
C this is important for very small alpha, where the
C  second expression becomes numerically unstable
         solution=2
         sin_alpha2=(ax1(1)**2+ax1(2)**2+ax1(3)**2)*
     *              (ax2(1)**2+ax2(2)**2+ax2(3)**2)-cos_alpha**2
         IF (sin_alpha2 .EQ. 0) THEN
            solution=3
            RETURN
         ENDIF
C now properly normalize the cross product
         ratio=sqrt(sin_gamma2/sin_alpha2)
         cross(1)=ratio*(ax1(2)*ax2(3)-ax2(2)*ax1(3))
         cross(2)=ratio*(ax1(3)*ax2(1)-ax2(3)*ax1(1))
         cross(3)=ratio*(ax1(1)*ax2(2)-ax2(1)*ax1(2))
         DO i=1, 3
            int1(i)=int1(i)+cross(i)
            int2(i)=int2(i)-cross(i)
         ENDDO
         RETURN
      END

C***********************************************************************
C     -------------------------------------                            *
      SUBROUTINE sum_dir(sum,nradd,direc,cos_min,nrdir)!               *
C     -------------------------------------                            *
C                                                                      *
C     (Purpose)                                                        *
C       sum directions consistent with a given directions              *
C                                                                      *
C     (Input)                                                          *
C       direc         -> direction around the sum is formed            *
C       cos_min       -> cos of the maximum ang. deviation from direc  *
C       nrdir         -> nr of directions                              *
C       COMMON BLOCK dirfitar:                                         *
C       directions    -> array of all directions defined by hit pairs  *
C       active        -> tells, whether a direction can serve as seed  *
C       related       -> tells, whether a pair of PMT defines direct.  *
C                                                                      *
C     (Output)                                                         *
C       sum           -> the normalized sum of all selected directions *
C                        the fourth componend gives the magnitude      *
C       nradd         -> the number of directions selected             *
C                                                                      *
C     (Creation Date and Author)                                       *
C       1998.02.12 Michael Smy   Version 1.0: creation                 *
C       1998.04.3  Michael Smy   Version 1.1: added mult-pass algor.   *
C                                                                      *
C----------------------------------------------------------------------*
         IMPLICIT NONE!                                                *
C----------------------------------------------------------------------*
C     (constants)                                                      *
c         INCLUDE 'lfclus.par'                              !           *
#include "lfclus.par"
C----------------------------------------------------------------------*
C     (arguments)                                                      *
         REAL    sum(4),direc(3),cos_min                   !           *
         INTEGER nrdir,nradd                               !           *
C                                                                      *
         REAL    directions(4,lfmax*(lfmax-1))             !           *
         LOGICAL active(lfmax*(lfmax-1))                   !           *
         COMMON  /dirfitar/directions,active               !           *
C----------------------------------------------------------------------*
C     (local variables)                                                *
         REAL    magnitude                                 !           *
         INTEGER index,j                                   !           *
C***********************************************************************

C===================================================================
C Subroutine begin:
C-------------------------------------------------------------------
C loop through all defined directions, form the scalar product with
C direc and add it, if eligible
         nradd=0
         DO j=1, 3
            sum(j)=0
         ENDDO
         DO index=1,nrdir
            IF (direc(1)*directions(1,index)+
     +          direc(2)*directions(2,index)+
     +          direc(3)*directions(3,index) .GT. cos_min) THEN
                active(index)=.FALSE.
                DO j=1, 3
                   sum(j)=sum(j)+directions(4,index)*directions(j,index)
                ENDDO
                nradd=nradd+1
            ENDIF
         ENDDO
         magnitude=sqrt(sum(1)**2+sum(2)**2+sum(3)**2)
         DO j=1, 3
            sum(j)=sum(j)/magnitude
         ENDDO
         sum(4)=magnitude
         RETURN
      END
